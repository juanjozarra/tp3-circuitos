
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c2  00800100  0000031a  000003ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000031a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008c  008001c2  008001c2  00000470  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  000004e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f24  00000000  00000000  00000618  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000978  00000000  00000000  0000153c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007e7  00000000  00000000  00001eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000284  00000000  00000000  0000269c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ae  00000000  00000000  00002920  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000049a  00000000  00000000  00002fce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00003468  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e1       	ldi	r30, 0x1A	; 26
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 3c       	cpi	r26, 0xC2	; 194
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a2 ec       	ldi	r26, 0xC2	; 194
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 34       	cpi	r26, 0x4E	; 78
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a2 00 	call	0x144	; 0x144 <main>
  9e:	0c 94 8b 01 	jmp	0x316	; 0x316 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Menu_Command>:
		
		
	}
	
	//Reinicializo para el siguiente comando
	too_long = 0;
  a6:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <too_long>
	for(unsigned char i = 0 ; i<5 ; i++){
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	01 c0       	rjmp	.+2      	; 0xb0 <Menu_Command+0xa>
  ae:	8f 5f       	subi	r24, 0xFF	; 255
  b0:	85 30       	cpi	r24, 0x05	; 5
  b2:	e8 f3       	brcs	.-6      	; 0xae <Menu_Command+0x8>
		command [i] = ' ';
	}
	indice_command = 0;
  b4:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <indice_command>
  b8:	08 95       	ret

000000ba <Menu_options>:
static unsigned char indice_command=0;
static unsigned char too_long = 0;
static char cmds [3][5] = {{"ON   "},{"OFF  "},{"RST  "}};

void Menu_options(void){
	print_Menu = 1;
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <print_Menu>
  c0:	08 95       	ret

000000c2 <Menu_Print>:
}

void Menu_Print(void){
		if(print_Menu){
  c2:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <print_Menu>
  c6:	88 23       	and	r24, r24
  c8:	a9 f0       	breq	.+42     	; 0xf4 <Menu_Print+0x32>
			static unsigned char step = 0;
			SerialPort_Write_String_To_Buffer(msg[step]);
  ca:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <__data_end>
  ce:	20 e4       	ldi	r18, 0x40	; 64
  d0:	82 9f       	mul	r24, r18
  d2:	c0 01       	movw	r24, r0
  d4:	11 24       	eor	r1, r1
  d6:	80 50       	subi	r24, 0x00	; 0
  d8:	9f 4f       	sbci	r25, 0xFF	; 255
  da:	0e 94 26 01 	call	0x24c	; 0x24c <SerialPort_Write_String_To_Buffer>
			step++;
  de:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <__data_end>
  e2:	8f 5f       	subi	r24, 0xFF	; 255
  e4:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <__data_end>
			if(step==3) {step = 0;
  e8:	83 30       	cpi	r24, 0x03	; 3
  ea:	21 f4       	brne	.+8      	; 0xf4 <Menu_Print+0x32>
  ec:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <__data_end>
			print_Menu =0;
  f0:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <print_Menu>
  f4:	08 95       	ret

000000f6 <Menu_Update>:
			}
		}
}

void Menu_Update(){
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	1f 92       	push	r1
  fc:	cd b7       	in	r28, 0x3d	; 61
  fe:	de b7       	in	r29, 0x3e	; 62
	char aux;
	if(!print_Menu){
 100:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <print_Menu>
 104:	81 11       	cpse	r24, r1
 106:	1a c0       	rjmp	.+52     	; 0x13c <Menu_Update+0x46>
		if(SerialPort_Get_Char_From_Buffer(&aux)){ //Si recibio un caracter
 108:	ce 01       	movw	r24, r28
 10a:	01 96       	adiw	r24, 0x01	; 1
 10c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <SerialPort_Get_Char_From_Buffer>
 110:	88 23       	and	r24, r24
 112:	a1 f0       	breq	.+40     	; 0x13c <Menu_Update+0x46>
			SerialPort_Write_Char_To_Buffer(aux);
 114:	89 81       	ldd	r24, Y+1	; 0x01
 116:	0e 94 16 01 	call	0x22c	; 0x22c <SerialPort_Write_Char_To_Buffer>
			if(aux == 'a'){  //Si apreto enter
 11a:	89 81       	ldd	r24, Y+1	; 0x01
 11c:	81 36       	cpi	r24, 0x61	; 97
 11e:	19 f4       	brne	.+6      	; 0x126 <Menu_Update+0x30>
				Menu_Command();
 120:	0e 94 53 00 	call	0xa6	; 0xa6 <Menu_Command>
 124:	0b c0       	rjmp	.+22     	; 0x13c <Menu_Update+0x46>
			}else{
				if(indice_command<5){ //El comando más largo es de 5 caracteres
 126:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <indice_command>
 12a:	85 30       	cpi	r24, 0x05	; 5
 12c:	20 f4       	brcc	.+8      	; 0x136 <Menu_Update+0x40>
					command [indice_command] = aux;
					indice_command++;
 12e:	8f 5f       	subi	r24, 0xFF	; 255
 130:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <indice_command>
 134:	03 c0       	rjmp	.+6      	; 0x13c <Menu_Update+0x46>
				}else {	//Ingreso más de 5 caracteres, no va a ser un comando valido
				too_long = 1;			
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <too_long>
				}
			}
		}
	}
}
 13c:	0f 90       	pop	r0
 13e:	df 91       	pop	r29
 140:	cf 91       	pop	r28
 142:	08 95       	ret

00000144 <main>:
#include "menu.h"
#define BR9600 (0x67)	// 0x67=103 configura BAUDRATE=9600@16MHz

int main(void)
{
	SerialPort_Init(BR9600); 		// Inicializo formato 8N1 y BAUDRATE = 9600bps
 144:	87 e6       	ldi	r24, 0x67	; 103
 146:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <SerialPort_Init>
	SerialPort_TX_Enable();			// Activo el Transmisor del Puerto Serie
 14a:	0e 94 02 01 	call	0x204	; 0x204 <SerialPort_TX_Enable>
	SerialPort_RX_Enable();			// Activo el Receptor del Puerto Serie
 14e:	0e 94 08 01 	call	0x210	; 0x210 <SerialPort_RX_Enable>
	Menu_options();
 152:	0e 94 5d 00 	call	0xba	; 0xba <Menu_options>
	SEOSTimer0Init();
 156:	0e 94 b1 00 	call	0x162	; 0x162 <SEOSTimer0Init>
	sei();
 15a:	78 94       	sei
	//Aca deberia iniciar en OFF el generador


	while(1)
	{		
		SEOSDispatcherTasks();
 15c:	0e 94 ba 00 	call	0x174	; 0x174 <SEOSDispatcherTasks>
 160:	fd cf       	rjmp	.-6      	; 0x15c <main+0x18>

00000162 <SEOSTimer0Init>:
		Menu_Update();
		Reader_Flag = 0;
	}	
}

void SEOSGoToSleep(void){
 162:	8d e4       	ldi	r24, 0x4D	; 77
 164:	87 bd       	out	0x27, r24	; 39
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	84 bd       	out	0x24, r24	; 36
 16a:	95 e0       	ldi	r25, 0x05	; 5
 16c:	95 bd       	out	0x25, r25	; 37
 16e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 172:	08 95       	ret

00000174 <SEOSDispatcherTasks>:
 174:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <Task_Flag>
 178:	88 23       	and	r24, r24
 17a:	21 f0       	breq	.+8      	; 0x184 <SEOSDispatcherTasks+0x10>
 17c:	0e 94 61 00 	call	0xc2	; 0xc2 <Menu_Print>
 180:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <Task_Flag>
 184:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <Serial_Flag>
 188:	88 23       	and	r24, r24
 18a:	21 f0       	breq	.+8      	; 0x194 <SEOSDispatcherTasks+0x20>
 18c:	0e 94 42 01 	call	0x284	; 0x284 <SerialPort_Update>
 190:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <Serial_Flag>
 194:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <Reader_Flag>
 198:	88 23       	and	r24, r24
 19a:	21 f0       	breq	.+8      	; 0x1a4 <SEOSDispatcherTasks+0x30>
 19c:	0e 94 7b 00 	call	0xf6	; 0xf6 <Menu_Update>
 1a0:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <Reader_Flag>
 1a4:	08 95       	ret

000001a6 <__vector_14>:
	//PONER EN IDLE
}

ISR(TIMER0_COMPA_vect){	
 1a6:	1f 92       	push	r1
 1a8:	0f 92       	push	r0
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	0f 92       	push	r0
 1ae:	11 24       	eor	r1, r1
 1b0:	8f 93       	push	r24
	static char taskCount=0,readerCount=10;
	
	Serial_Flag = 1;
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <Serial_Flag>
	
	if(++readerCount==10){
 1b8:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <readerCount.1668>
 1bc:	8f 5f       	subi	r24, 0xFF	; 255
 1be:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <readerCount.1668>
 1c2:	8a 30       	cpi	r24, 0x0A	; 10
 1c4:	29 f4       	brne	.+10     	; 0x1d0 <__vector_14+0x2a>
		Reader_Flag=1;
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <Reader_Flag>
		readerCount=0;
 1cc:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <readerCount.1668>
	}

	if(++taskCount==60){
 1d0:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <taskCount.1667>
 1d4:	8f 5f       	subi	r24, 0xFF	; 255
 1d6:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <taskCount.1667>
 1da:	8c 33       	cpi	r24, 0x3C	; 60
 1dc:	29 f4       	brne	.+10     	; 0x1e8 <__vector_14+0x42>
		Task_Flag=1;
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <Task_Flag>
		taskCount=0;
 1e4:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <taskCount.1667>
	}
}
 1e8:	8f 91       	pop	r24
 1ea:	0f 90       	pop	r0
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	0f 90       	pop	r0
 1f0:	1f 90       	pop	r1
 1f2:	18 95       	reti

000001f4 <SerialPort_Init>:
	for(i=j;i<5;i++)
	{
		SerialPort_Wait_For_TX_Buffer_Free();
		SerialPort_Send_Data('0'+str[i]);
	}
}
 1f4:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 1f8:	96 e0       	ldi	r25, 0x06	; 6
 1fa:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 1fe:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 202:	08 95       	ret

00000204 <SerialPort_TX_Enable>:
 204:	e1 ec       	ldi	r30, 0xC1	; 193
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	80 81       	ld	r24, Z
 20a:	88 60       	ori	r24, 0x08	; 8
 20c:	80 83       	st	Z, r24
 20e:	08 95       	ret

00000210 <SerialPort_RX_Enable>:
 210:	e1 ec       	ldi	r30, 0xC1	; 193
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	80 61       	ori	r24, 0x10	; 16
 218:	80 83       	st	Z, r24
 21a:	08 95       	ret

0000021c <SerialPort_Wait_For_TX_Buffer_Free>:
 21c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 220:	85 ff       	sbrs	r24, 5
 222:	fc cf       	rjmp	.-8      	; 0x21c <SerialPort_Wait_For_TX_Buffer_Free>
 224:	08 95       	ret

00000226 <SerialPort_Send_Data>:
 226:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 22a:	08 95       	ret

0000022c <SerialPort_Write_Char_To_Buffer>:
//*********

void SerialPort_Write_Char_To_Buffer (char data)
{
	//Escribe en el buffer solo si hay espacio
	if (TXindice_lectura < TX_BUFFER_LENGHT){
 22c:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <TXindice_lectura>
 230:	90 34       	cpi	r25, 0x40	; 64
 232:	58 f4       	brcc	.+22     	; 0x24a <SerialPort_Write_Char_To_Buffer+0x1e>
		TX_BUFFER[TXindice_escritura]= data;
 234:	e0 91 4c 02 	lds	r30, 0x024C	; 0x80024c <TXindice_escritura>
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	e6 5f       	subi	r30, 0xF6	; 246
 23c:	fd 4f       	sbci	r31, 0xFD	; 253
 23e:	80 83       	st	Z, r24
		TXindice_escritura++;
 240:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <TXindice_escritura>
 244:	8f 5f       	subi	r24, 0xFF	; 255
 246:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <TXindice_escritura>
 24a:	08 95       	ret

0000024c <SerialPort_Write_String_To_Buffer>:
	}
}

void SerialPort_Write_String_To_Buffer(char * STR_PTR)
{
 24c:	0f 93       	push	r16
 24e:	1f 93       	push	r17
 250:	cf 93       	push	r28
 252:	8c 01       	movw	r16, r24
	unsigned char i = 0;
 254:	c0 e0       	ldi	r28, 0x00	; 0
	while (STR_PTR [i] != '\0'){
 256:	03 c0       	rjmp	.+6      	; 0x25e <SerialPort_Write_String_To_Buffer+0x12>
		SerialPort_Write_Char_To_Buffer(STR_PTR[i]);
 258:	0e 94 16 01 	call	0x22c	; 0x22c <SerialPort_Write_Char_To_Buffer>
		i++;
 25c:	cf 5f       	subi	r28, 0xFF	; 255
}

void SerialPort_Write_String_To_Buffer(char * STR_PTR)
{
	unsigned char i = 0;
	while (STR_PTR [i] != '\0'){
 25e:	f8 01       	movw	r30, r16
 260:	ec 0f       	add	r30, r28
 262:	f1 1d       	adc	r31, r1
 264:	80 81       	ld	r24, Z
 266:	81 11       	cpse	r24, r1
 268:	f7 cf       	rjmp	.-18     	; 0x258 <SerialPort_Write_String_To_Buffer+0xc>
		SerialPort_Write_Char_To_Buffer(STR_PTR[i]);
		i++;
	}
}
 26a:	cf 91       	pop	r28
 26c:	1f 91       	pop	r17
 26e:	0f 91       	pop	r16
 270:	08 95       	ret

00000272 <SerialPort_Send_Char>:

void SerialPort_Send_Char(char dato)
{
 272:	cf 93       	push	r28
 274:	c8 2f       	mov	r28, r24
	SerialPort_Wait_For_TX_Buffer_Free();
 276:	0e 94 0e 01 	call	0x21c	; 0x21c <SerialPort_Wait_For_TX_Buffer_Free>
	SerialPort_Send_Data(dato);
 27a:	8c 2f       	mov	r24, r28
 27c:	0e 94 13 01 	call	0x226	; 0x226 <SerialPort_Send_Data>
}
 280:	cf 91       	pop	r28
 282:	08 95       	ret

00000284 <SerialPort_Update>:

void SerialPort_Update(void)
{
	if (UCSR0A & (1<<RXC0)) {  //Byte recibido. Escribir byte en el buffer de entrada
 284:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 288:	88 23       	and	r24, r24
 28a:	8c f4       	brge	.+34     	; 0x2ae <SerialPort_Update+0x2a>
		if(RXindice_escritura < RX_BUFFER_LENGHT){
 28c:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <RXindice_escritura>
 290:	80 34       	cpi	r24, 0x40	; 64
 292:	68 f4       	brcc	.+26     	; 0x2ae <SerialPort_Update+0x2a>
			RX_BUFFER[RXindice_escritura] = UDR0; //guardar dato en el buffer
 294:	e0 91 4a 02 	lds	r30, 0x024A	; 0x80024a <RXindice_escritura>
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 29e:	e6 53       	subi	r30, 0x36	; 54
 2a0:	fe 4f       	sbci	r31, 0xFE	; 254
 2a2:	80 83       	st	Z, r24
			RXindice_escritura++;
 2a4:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <RXindice_escritura>
 2a8:	8f 5f       	subi	r24, 0xFF	; 255
 2aa:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <RXindice_escritura>
		}
	}
	
	//Hay byte en el buffer TX para transmitir?
	if (TXindice_lectura < TXindice_escritura){
 2ae:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <TXindice_lectura>
 2b2:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <TXindice_escritura>
 2b6:	98 17       	cp	r25, r24
 2b8:	70 f4       	brcc	.+28     	; 0x2d6 <SerialPort_Update+0x52>
		SerialPort_Send_Char( TX_BUFFER[TXindice_lectura]);
 2ba:	e0 91 4d 02 	lds	r30, 0x024D	; 0x80024d <TXindice_lectura>
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	e6 5f       	subi	r30, 0xF6	; 246
 2c2:	fd 4f       	sbci	r31, 0xFD	; 253
 2c4:	80 81       	ld	r24, Z
 2c6:	0e 94 39 01 	call	0x272	; 0x272 <SerialPort_Send_Char>
		TXindice_lectura++;
 2ca:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <TXindice_lectura>
 2ce:	8f 5f       	subi	r24, 0xFF	; 255
 2d0:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <TXindice_lectura>
 2d4:	08 95       	ret
		} else { //No hay datos disponibles para enviar
		TXindice_lectura = 0;
 2d6:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <TXindice_lectura>
		TXindice_escritura = 0;
 2da:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <TXindice_escritura>
 2de:	08 95       	ret

000002e0 <SerialPort_Get_Char_From_Buffer>:
	}
}

char SerialPort_Get_Char_From_Buffer(char * ch){
 2e0:	dc 01       	movw	r26, r24
	if(RXindice_lectura<RXindice_escritura){
 2e2:	20 91 4b 02 	lds	r18, 0x024B	; 0x80024b <RXindice_lectura>
 2e6:	90 91 4a 02 	lds	r25, 0x024A	; 0x80024a <RXindice_escritura>
 2ea:	29 17       	cp	r18, r25
 2ec:	70 f4       	brcc	.+28     	; 0x30a <SerialPort_Get_Char_From_Buffer+0x2a>
		*ch = RX_BUFFER[ RXindice_lectura];
 2ee:	e0 91 4b 02 	lds	r30, 0x024B	; 0x80024b <RXindice_lectura>
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	e6 53       	subi	r30, 0x36	; 54
 2f6:	fe 4f       	sbci	r31, 0xFE	; 254
 2f8:	80 81       	ld	r24, Z
 2fa:	8c 93       	st	X, r24
		RXindice_lectura++;
 2fc:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <RXindice_lectura>
 300:	8f 5f       	subi	r24, 0xFF	; 255
 302:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <RXindice_lectura>
		return 1;// Hay nuevo dato
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	08 95       	ret
	}
	else{
		RXindice_lectura=0;
 30a:	10 92 4b 02 	sts	0x024B, r1	; 0x80024b <RXindice_lectura>
		RXindice_escritura=0;
 30e:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <RXindice_escritura>
		return 0; // No Hay
 312:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 314:	08 95       	ret

00000316 <_exit>:
 316:	f8 94       	cli

00000318 <__stop_program>:
 318:	ff cf       	rjmp	.-2      	; 0x318 <__stop_program>
